// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:car_repair/entity/comment_entity.dart';
import 'package:car_repair/generated/json/comment_entity_helper.dart';
import 'package:car_repair/entity/fire_message_entity.dart';
import 'package:car_repair/generated/json/fire_message_entity_helper.dart';
import 'package:car_repair/entity/fire_user_info_entity.dart';
import 'package:car_repair/generated/json/fire_user_info_entity_helper.dart';
import 'package:car_repair/entity/conversation_entity.dart';
import 'package:car_repair/generated/json/conversation_entity_helper.dart';
import 'package:car_repair/entity/user_infor_entity.dart';
import 'package:car_repair/generated/json/user_infor_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case CommentEntity:
			return commentEntityFromJson(data as CommentEntity, json) as T;			case FireMessageEntity:
			return fireMessageEntityFromJson(data as FireMessageEntity, json) as T;			case FireUserInfoEntity:
			return fireUserInfoEntityFromJson(data as FireUserInfoEntity, json) as T;			case ConversationEntity:
			return conversationEntityFromJson(data as ConversationEntity, json) as T;			case UserInforEntity:
			return userInforEntityFromJson(data as UserInforEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case CommentEntity:
			return commentEntityToJson(data as CommentEntity);			case FireMessageEntity:
			return fireMessageEntityToJson(data as FireMessageEntity);			case FireUserInfoEntity:
			return fireUserInfoEntityToJson(data as FireUserInfoEntity);			case ConversationEntity:
			return conversationEntityToJson(data as ConversationEntity);			case UserInforEntity:
			return userInforEntityToJson(data as UserInforEntity);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'CommentEntity':
			return CommentEntity().fromJson(json);			case 'FireMessageEntity':
			return FireMessageEntity().fromJson(json);			case 'FireUserInfoEntity':
			return FireUserInfoEntity().fromJson(json);			case 'ConversationEntity':
			return ConversationEntity().fromJson(json);			case 'UserInforEntity':
			return UserInforEntity().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'CommentEntity':
			return List<CommentEntity>();			case 'FireMessageEntity':
			return List<FireMessageEntity>();			case 'FireUserInfoEntity':
			return List<FireUserInfoEntity>();			case 'ConversationEntity':
			return List<ConversationEntity>();			case 'UserInforEntity':
			return List<UserInforEntity>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}